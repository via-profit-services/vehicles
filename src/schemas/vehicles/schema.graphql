
extend type Query {
  vehicles: VehiclesQuery!
}

type VehiclesQuery {
  makes(
    first: Int
    offset: Int
    after: String
    orderBy: [VehicleMakesListOrderBy]
    filter: VehicleMakesListFilter
    search: VehicleMakesSearch
  ): VehicleMakesListConnection!

  models(
    first: Int
    offset: Int
    after: String
    orderBy: [VehicleModelsListOrderBy]
    filter: VehicleModelsListFilter
    search: VehicleModelsSearch
  ): VehicleModelsListConnection!

  make(id: ID!): VehicleMake
  model(id: ID!): VehicleModel
}


input VehicleMakesListOrderBy {
  field: VehicleMakesListOrderField!
  direction: OrderDirection!
}

input VehicleModelsListOrderBy {
  field: VehicleModelsListOrderField!
  direction: OrderDirection!
}


enum VehicleMakesSearchFields{
  name
}

enum VehicleModelsSearchFields {
  name
}


input VehicleMakesSearch {
  fields: [VehicleMakesSearchFields!]!
  query: String!
}


input VehicleModelsSearch {
  fields: [VehicleModelsSearchFields!]!
  query: String!
}


input VehicleMakesListFilter {
  id: [ID!]
}

input VehicleModelsListFilter {
  id: [ID!]
  make: [ID!]
}


enum VehicleMakesListOrderField {
  name
}

enum VehicleModelsListOrderField {
  make
  name
}


type VehicleMakesListConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [VehiclesMakeEdge]!
}

type VehicleModelsListConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [VehiclesModelEdge]!
}


type VehiclesMakeEdge{
  node: VehicleMake!
  cursor: String!
}

type VehiclesModelEdge {
  node: VehicleModel!
  cursor: String!
}

type VehicleMake {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type VehicleModel {
  id: ID!
  make: VehicleMake!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}